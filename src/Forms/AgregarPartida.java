/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Modelo.Conexion;
import Modelo.Libro;
import Modelo.Plantilla;
import com.sun.glass.events.KeyEvent;
import interfas.Animacion;
import java.awt.event.ItemEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ruben
 */
public class AgregarPartida extends javax.swing.JFrame {

    Animacion anim = new Animacion();

    Libro l = new Libro();
    boolean Encabezado = false;//Nos servira para insertar el encabezado si no esta
    boolean Concepto = true;
    int UltimaDebe = 1;//nos servira para saber en donde ir insertando en el debe
    Plantilla plan = new Plantilla();

    /**
     * Creates new form AgregarPartida
     */
    public AgregarPartida() {

        initComponents();
        rsscalelabel.RSScaleLabel.setScaleLabel(this.btnAvanzado, "src/Imagenes/menu.png");
        rsscalelabel.RSScaleLabel.setScaleLabel(this.btnSalir, "src/Imagenes/multiply.png");
        rsscalelabel.RSScaleLabel.setScaleLabel(this.btnAgregar, "src/Imagenes/plus.png");
        rsscalelabel.RSScaleLabel.setScaleLabel(this.btnModificar, "src/Imagenes/writing.png");

        jSpinner1.setValue(l.getAnterior());
        Grupo_botones_DH.add(btn_debe);
        Grupo_botones_DH.add(btn_haber);
        GrupoBotonesIVA.add(btnMasIVA);
        GrupoBotonesIVA.add(btnIncluido);
        GrupoBotonesIVA.add(btnExento);
        grupoBotonesDC.add(btnCFI);
        grupoBotonesDC.add(btnDFI);
        cargarLista("SELECT * FROM `cuenta`;");//Carga todas las cuentas en un comboBox
        CargarPlantillas();
        btnModificar.setVisible(false);
        cargarNPartida();  //funcion que cargara el numero de partida que halla
        btnExento.setSelected(true);
        OcultarDC();
        btnAgregar.setEnabled(false);

        //vemos si se usara la plantilla
        if (plan.isUsar()) {
            System.out.println("se va usar la plantilla");
            AgregarPlantilla();
            sumar();
            btnAgregar.setEnabled(true);
            txtConcepto.setText(plan.getConcepto());
            Date date;
            try {
                date = new SimpleDateFormat("yyyy-MM-dd").parse(plan.getFecha());
                txtFecha.setDate(date);
            } catch (ParseException ex) {
                System.out.println(ex);
                Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
            }

            Encabezado = true;
        } else {
            System.out.println("no se usa plantilla");
            //jButton1.setVisible(false);
        }

        int[] anchos = {20, 20, 100, 50, 50};

        for (int i = 0; i < tablePartidaPreview.getColumnCount(); i++) {
            tablePartidaPreview.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Grupo_botones_DH = new javax.swing.ButtonGroup();
        GrupoBotonesIVA = new javax.swing.ButtonGroup();
        grupoBotonesDC = new javax.swing.ButtonGroup();
        PanelDetallePartida = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtConcepto = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtNPartida = new javax.swing.JTextField();
        txtModif = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JLabel();
        txtFecha = new com.toedter.calendar.JDateChooser();
        PanelElegirCuenta = new javax.swing.JPanel();
        cbxLista = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnAvanzado = new javax.swing.JLabel();
        PanelElegirPlantilla = new javax.swing.JPanel();
        cbxPlantillas = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        PanelSaldo = new javax.swing.JPanel();
        txtSaldo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        btn_debe = new javax.swing.JRadioButton();
        btn_haber = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        btnExento = new javax.swing.JRadioButton();
        btnIncluido = new javax.swing.JRadioButton();
        btnMasIVA = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        btnAgregarCuenta = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        PanelIva = new javax.swing.JPanel();
        btnDFI = new javax.swing.JRadioButton();
        btnCFI = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        PanelPartida = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtTotalDebe = new javax.swing.JTextField();
        txtTotalHaber = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablePartidaPreview = new javax.swing.JTable();
        btnModificar = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 102));
        setMinimumSize(new java.awt.Dimension(640, 650));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(640, 650));
        setResizable(false);
        setSize(new java.awt.Dimension(640, 650));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanelDetallePartida.setBackground(new java.awt.Color(45, 52, 71));
        PanelDetallePartida.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtConcepto.setColumns(20);
        txtConcepto.setRows(5);
        jScrollPane4.setViewportView(txtConcepto);

        PanelDetallePartida.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 300, 70));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Concepto");
        PanelDetallePartida.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Fecha");
        PanelDetallePartida.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, -1, -1));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Partida");
        PanelDetallePartida.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, -1, -1));

        txtNPartida.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNPartida.setEnabled(false);
        txtNPartida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNPartidaKeyTyped(evt);
            }
        });
        PanelDetallePartida.add(txtNPartida, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 50, 30));

        txtModif.setEnabled(false);
        PanelDetallePartida.add(txtModif, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 10, 10));

        jSpinner1.setEnabled(false);
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        PanelDetallePartida.add(jSpinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("N. Libro");
        PanelDetallePartida.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        btnSalir.setBackground(new java.awt.Color(45, 52, 71));
        btnSalir.setText("Salir");
        btnSalir.setToolTipText("Cerrar ventana");
        btnSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalir.setOpaque(true);
        btnSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSalirMouseClicked(evt);
            }
        });
        PanelDetallePartida.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 40, 40));
        PanelDetallePartida.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, -1, -1));

        getContentPane().add(PanelDetallePartida, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 160));

        PanelElegirCuenta.setBackground(new java.awt.Color(154, 169, 238));
        PanelElegirCuenta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbxLista.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxListaItemStateChanged(evt);
            }
        });
        PanelElegirCuenta.add(cbxLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 170, 30));

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });
        PanelElegirCuenta.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 170, 30));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel9.setText("Buscar cuenta por su nombre");
        PanelElegirCuenta.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        btnAvanzado.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnAvanzado.setToolTipText("Modo Avanzado");
        btnAvanzado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAvanzadoMouseClicked(evt);
            }
        });
        PanelElegirCuenta.add(btnAvanzado, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 40, 40));

        getContentPane().add(PanelElegirCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, 320, 160));

        PanelElegirPlantilla.setBackground(new java.awt.Color(45, 52, 71));
        PanelElegirPlantilla.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbxPlantillas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxPlantillasItemStateChanged(evt);
            }
        });
        PanelElegirPlantilla.add(cbxPlantillas, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 166, 29));

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Transaccion a realizar:");
        PanelElegirPlantilla.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        getContentPane().add(PanelElegirPlantilla, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 320, 160));

        PanelSaldo.setBackground(new java.awt.Color(154, 169, 238));
        PanelSaldo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSaldo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSaldoKeyTyped(evt);
            }
        });
        PanelSaldo.add(txtSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 150, 30));

        jLabel15.setBackground(new java.awt.Color(45, 52, 71));
        jLabel15.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Ajustes Avanzados");
        jLabel15.setOpaque(true);
        PanelSaldo.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 30));

        btn_debe.setBackground(new java.awt.Color(154, 169, 238));
        btn_debe.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btn_debe.setSelected(true);
        btn_debe.setText("Debe");
        PanelSaldo.add(btn_debe, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        btn_haber.setBackground(new java.awt.Color(154, 169, 238));
        btn_haber.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btn_haber.setText("Haber");
        PanelSaldo.add(btn_haber, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, -1, -1));

        jLabel16.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel16.setText("Saldo");
        PanelSaldo.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));

        btnExento.setBackground(new java.awt.Color(154, 169, 238));
        btnExento.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnExento.setText("Exento");
        btnExento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExentoMouseClicked(evt);
            }
        });
        PanelSaldo.add(btnExento, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, -1, -1));

        btnIncluido.setBackground(new java.awt.Color(154, 169, 238));
        btnIncluido.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnIncluido.setText("Incluido");
        btnIncluido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIncluidoMouseClicked(evt);
            }
        });
        PanelSaldo.add(btnIncluido, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, -1, -1));

        btnMasIVA.setBackground(new java.awt.Color(154, 169, 238));
        btnMasIVA.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnMasIVA.setText("+ IVA");
        btnMasIVA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMasIVAMouseClicked(evt);
            }
        });
        PanelSaldo.add(btnMasIVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, -1, -1));

        jLabel17.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel17.setText("Iva de la cuenta");
        PanelSaldo.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 150, -1));

        btnAgregarCuenta.setText("Agregar cuenta");
        btnAgregarCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCuentaActionPerformed(evt);
            }
        });
        PanelSaldo.add(btnAgregarCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, 120, -1));

        btn_eliminar.setText("Eliminar Cuenta(s)");
        btn_eliminar.setEnabled(false);
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });
        PanelSaldo.add(btn_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, -1, -1));

        PanelIva.setBackground(new java.awt.Color(154, 169, 238));
        PanelIva.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDFI.setBackground(new java.awt.Color(154, 169, 238));
        btnDFI.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnDFI.setText("DFI");
        btnDFI.setEnabled(false);
        PanelIva.add(btnDFI, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, 30));

        btnCFI.setBackground(new java.awt.Color(154, 169, 238));
        btnCFI.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnCFI.setText("CFI");
        PanelIva.add(btnCFI, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, 30));

        jLabel18.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel18.setText("Tipo de iva");
        PanelIva.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 100, -1));

        PanelSaldo.add(PanelIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 130, 130));

        getContentPane().add(PanelSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -150, 640, 150));

        PanelPartida.setBackground(new java.awt.Color(231, 235, 244));
        PanelPartida.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Totales");
        PanelPartida.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 300, -1, -1));
        PanelPartida.add(txtTotalDebe, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, 110, 30));
        PanelPartida.add(txtTotalHaber, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, 110, 30));

        tablePartidaPreview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Codigo", "Concepto", "Debe", "Haber"
            }
        ));
        tablePartidaPreview.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tablePartidaPreviewMouseDragged(evt);
            }
        });
        tablePartidaPreview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePartidaPreviewMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tablePartidaPreview);

        PanelPartida.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 600, 254));

        btnModificar.setText("m");
        btnModificar.setToolTipText("Modificar partida en Base de datos");
        btnModificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarMouseClicked(evt);
            }
        });
        PanelPartida.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 30, 30));

        btnAgregar.setText("a");
        btnAgregar.setToolTipText("Agregar partida a base de datos");
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarMouseClicked(evt);
            }
        });
        PanelPartida.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 30, 30));

        getContentPane().add(PanelPartida, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 640, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNPartidaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNPartidaKeyTyped

    }//GEN-LAST:event_txtNPartidaKeyTyped

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged

    }//GEN-LAST:event_jSpinner1StateChanged

    private void cbxPlantillasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxPlantillasItemStateChanged
        // COMBOBOX PLANTILLAS
        if (evt.getStateChange() == ItemEvent.SELECTED) {//esto detecta si el evento es "seleccionado un item"
            String seleccion = cbxPlantillas.getSelectedItem().toString();
            if (!seleccion.equals("---PLANTILLAS---")) {
                Conexion con = new Conexion();
                ResultSet rs = con.Consulta("SELECT * FROM `plantilla` WHERE `NombrePlantilla` = '" + seleccion + "'", con.getConexion());
                try {
                    if (rs.next()) {
                        plan.setIdplantilla(rs.getString("IdPlantilla"));
                        plan.setTipoIVA(rs.getString("TipoIVA"));
                        plan.setDef(rs.getString("CuentaDefault"));
                        MuestraPlantilla mp = new MuestraPlantilla();
                        mp.setVisible(true);
                        mp.setLocationRelativeTo(null);
                        mp.setDefaultCloseOperation(mp.DISPOSE_ON_CLOSE);
                        this.setVisible(false);
                        this.dispose();
                    }
                    con.close();
                    rs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_cbxPlantillasItemStateChanged

    private void tablePartidaPreviewMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePartidaPreviewMouseDragged
        btn_eliminar.setEnabled(true);
    }//GEN-LAST:event_tablePartidaPreviewMouseDragged

    private void tablePartidaPreviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePartidaPreviewMouseClicked

        btn_eliminar.setEnabled(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_tablePartidaPreviewMouseClicked

    private void cbxListaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxListaItemStateChanged

    }//GEN-LAST:event_cbxListaItemStateChanged

    private void txtSaldoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSaldoKeyTyped
        SoloNumeros(evt);//valida que solo se ingresen numeros
    }//GEN-LAST:event_txtSaldoKeyTyped

    private void btnExentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExentoMouseClicked
        btnDFI.setEnabled(false);
        btnCFI.setEnabled(false);
    }//GEN-LAST:event_btnExentoMouseClicked

    private void btnIncluidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIncluidoMouseClicked
        btnDFI.setSelected(true);//que seleccione el boton DFI
        btnDFI.setEnabled(true);
        btnCFI.setEnabled(true);
    }//GEN-LAST:event_btnIncluidoMouseClicked

    private void btnMasIVAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMasIVAMouseClicked
        btnDFI.setSelected(true);//que seleccione el boton DFI
        btnDFI.setEnabled(true);
        btnCFI.setEnabled(true);
    }//GEN-LAST:event_btnMasIVAMouseClicked

    private void btnAgregarCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCuentaActionPerformed

        preview();//Funcion que permite una vista previa de la partida, se llama cada vez que se agrega una cuenta
        sumar();   //Hace la sumatoria del debe y haber, para ver si cuadra


    }//GEN-LAST:event_btnAgregarCuentaActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed

        if (!eliminar(false)) {
            JOptionPane.showMessageDialog(rootPane, "No puedes eliminar el concepto o el n de partida");
        }
        //si al eliminar las cuentas seleccionadas (false) me da error
        btn_eliminar.setEnabled(false);

        if (tablePartidaPreview.getRowCount() <= 2) {
            btnAgregar.setEnabled(false);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void btnAvanzadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAvanzadoMouseClicked

        if (PanelSaldo.getY() == -150) {
            PanelSaldo.setLocation(0, 0);
        }
        if (PanelElegirCuenta.getX() == 320) {
            cbxPlantillas.setEnabled(true);
        } else {
            cbxPlantillas.setEnabled(false);
        }

        anim.jPanelXLeft(580, 320, 10, 5, PanelElegirCuenta);
        anim.jPanelXRight(320, 580, 10, 5, PanelElegirCuenta);

        anim.jPanelYDown(0, 160, 10, 5, PanelSaldo);
        anim.jPanelYUp(160, -150, 10, 5, PanelSaldo);

        anim.jPanelYDown(160, 310, 10, 5, PanelPartida);
        anim.jPanelYUp(310, 160, 10, 5, PanelPartida);

// TODO add your handling code here:
    }//GEN-LAST:event_btnAvanzadoMouseClicked

    private void btnSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalirMouseClicked
        plan.setUsar(false);
        this.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_btnSalirMouseClicked

    private void btnAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseClicked

        String debe = txtTotalDebe.getText();
        String haber = txtTotalHaber.getText();
        if (debe.equals(haber)) {
            try {
                insertarPartida();
                JOptionPane.showMessageDialog(rootPane, "Partida ingresada correctamente a la base de datos");

                this.cargarNPartida();
                this.cargarLista("SELECT * FROM `cuenta`;");

                this.setVisible(false);
                this.dispose();
                plan.setUsar(false);
                plan.setFecha("");
                plan.setConcepto("");
            } catch (SQLException ex) {
                Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Revisa los datos ingresados!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "LOS TOTALES DEL DEBE Y HABER TIENEN QUE SER IGUALES");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarMouseClicked

    private void btnModificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarMouseClicked

        sumar();
        if (((!txtTotalDebe.getText().toString().isEmpty()) && (!txtTotalHaber.getText().toString().isEmpty())) && (Double.parseDouble(txtTotalDebe.getText().toString()) > 0 && Double.parseDouble(txtTotalHaber.getText().toString()) > 0)) {
            if ((Double.parseDouble(txtTotalDebe.getText().toString())) == (Double.parseDouble(txtTotalHaber.getText().toString()))) {
                String debe = txtTotalDebe.getText();
                String haber = txtTotalHaber.getText();
                if (debe.equals(haber)) {
                    try {
                        new Conexion().Ejecutar("DELETE FROM `cuenta_partida` WHERE `partida_id` = " + txtModif.getText());

                        ModificarPartida();
                        JOptionPane.showMessageDialog(rootPane, "Partida ingresada correctamente a la base de datos");

                        this.cargarNPartida();
                        this.cargarLista("SELECT * FROM `cuenta`;");

                        this.setVisible(false);
                        this.dispose();

                    } catch (SQLException ex) {
                        Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(rootPane, "Revisa los datos ingresados!");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "LOS TOTALES DEL DEBE Y HABER TIENEN QUE SER IGUALES");
                }
            } else {
                JOptionPane.showMessageDialog(null, "LOS TOTALES DEBEN SER IGUALES");
            }
        } else {
            JOptionPane.showMessageDialog(null, "INGRESE UNA CUENTA");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_btnModificarMouseClicked
//##########################################################################################################################

    int letras = 0;

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed

        if (evt.getKeyCode() == evt.VK_BACK_SPACE) {

            if (letras > 0) {
                letras--;
            }

        } else if (evt.getKeyCode() == evt.VK_A || evt.getKeyCode() == evt.VK_B || evt.getKeyCode() == evt.VK_C || evt.getKeyCode() == evt.VK_D || evt.getKeyCode() == evt.VK_E || evt.getKeyCode() == evt.VK_F || evt.getKeyCode() == evt.VK_G || evt.getKeyCode() == evt.VK_H || evt.getKeyCode() == evt.VK_I || evt.getKeyCode() == evt.VK_J || evt.getKeyCode() == evt.VK_K || evt.getKeyCode() == evt.VK_L || evt.getKeyCode() == evt.VK_M || evt.getKeyCode() == evt.VK_N || evt.getKeyCode() == evt.VK_O || evt.getKeyCode() == evt.VK_P || evt.getKeyCode() == evt.VK_Q || evt.getKeyCode() == evt.VK_R || evt.getKeyCode() == evt.VK_S || evt.getKeyCode() == evt.VK_T || evt.getKeyCode() == evt.VK_U || evt.getKeyCode() == evt.VK_V || evt.getKeyCode() == evt.VK_W || evt.getKeyCode() == evt.VK_X || evt.getKeyCode() == evt.VK_Y || evt.getKeyCode() == evt.VK_Z) {
            letras++;

            //System.out.println(letras);
        }


    }//GEN-LAST:event_jTextField3KeyPressed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        String item = "";
        String busca = "";
        String fin = "";
        char it;
        char bu;
        boolean encontro = false;
        //recorremos los items
        for (int i = 0; i < lista.length; i++) {
            //recorremos el total de letras para la busque

            //hacemos que todas las letras sean minusculas para comparar mejores resultados
            item = lista[i].toLowerCase();
            busca = jTextField3.getText().toString().toLowerCase();

            if (letras < 10) {
                if (item.substring(0, letras).startsWith(busca)) {
                    //System.out.println(lista[i] + " = " + jTextField3.getText().toString());
                    cbxLista.setSelectedIndex(i);
                    encontro = true;
                    break;
                } else {
                    encontro = false;
                    cbxLista.setSelectedIndex(0);
                }
            }

        }
        int z = busca.length();
        String[] lista2 = new String[292];
        if (!encontro) {

            String temp = "";
            lista2[0] = lista[0];
            for (int i = 1; i < lista.length; i++) {
                temp = "";
                for (int j = 0; j < z; j++) {
                    if (lista[i].length() < z) {
                        temp = lista[i];
                    } else {
                        temp += String.valueOf(lista[i].charAt(j));
                    }

                }
                lista2[i] = temp.toLowerCase();
            }

            for (int i = 0; i < lista2.length; i++) {
                //System.out.println(lista2[i] + " = "+ busca);
                if (lista2[i].equals(busca)) {
                    cbxLista.setSelectedIndex(i);
                    break;
                } else {
                    cbxLista.setSelectedIndex(0);

                }
            }
        }


    }//GEN-LAST:event_jTextField3KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AgregarPartida A = new AgregarPartida();
                A.setVisible(true);
                A.setLocationRelativeTo(null);
            }
        });
    }
    String[] lista = new String[292];

    public void cargarLista(String query) {
        DefaultComboBoxModel cbxModelo = (DefaultComboBoxModel) cbxLista.getModel();

        int nivel;
        int i = 1;
        int otro_nivel;
        try {
            //Nueva conexion
            Conexion conecta = new Conexion();
            ResultSet rs, rs1;
            rs = conecta.Consulta(query, conecta.getConexion());

            //removemos todo del combo box
            cbxLista.removeAllItems();

            //mientras halla otro dato en rs, añadimos a la combo box un resultado
            lista[0] = "-SELECCIONE CUENTA-";
            while (rs.next()) {
                nivel = Integer.parseInt(rs.getString(3));
                if (nivel > 2) {

                    //cbxLista.addItem(rs.getString(4) + rs.getString(2));
                    //cbxModelo.addElement(rs.getString(4) + rs.getString(2));
                    lista[i] = rs.getString(4) + rs.getString(2);
                    i++;

                }
            }
            //agregamos los items pero solo si es la primera vez que se ha lanzado
            for (int q = 0; q < lista.length; q++) {

                cbxModelo.addElement(lista[q]);
            }

            //cerramos la conexion cerrando el resultado obtenido
            rs.close();
            conecta.close();

        } catch (SQLException ex) {
            Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void sumar() {
        double t = 0;
        double p = 0;
        //mientras la tabla tenga mas de un dato
        if (tablePartidaPreview.getRowCount() > 1) {
            for (int i = 0; i < tablePartidaPreview.getRowCount(); i++) {
                if (!tablePartidaPreview.getValueAt(i, 3).toString().isEmpty()) {
                    p = Double.parseDouble(tablePartidaPreview.getValueAt(i, 3).toString());
                    t += p;

                    if (i < tablePartidaPreview.getRowCount() - 1) {

                        if (tablePartidaPreview.getValueAt(i + 1, 3).toString().isEmpty()) { //si la siguiente celda esta vacia
                            this.UltimaDebe = i + 1; //entonces esta es la ultima cuenta del debe
                        }

                    }

                }
            }
            txtTotalDebe.setText(String.valueOf(t));
        } else {
            this.UltimaDebe = 1;
        }

        double t1 = 0;
        double p1 = 0;
        if (tablePartidaPreview.getRowCount() > 1) {
            for (int i = 0; i < tablePartidaPreview.getRowCount(); i++) {
                if (!tablePartidaPreview.getValueAt(i, 4).toString().isEmpty()) {
                    p1 = Double.parseDouble(tablePartidaPreview.getValueAt(i, 4).toString());
                    t1 += p1;
                }
            }
            txtTotalHaber.setText(String.valueOf(t1));
        }

    }

    public void preview() {
        String combo = "";
        String cuenta = "";
        String cod = "";
        char c;
        if (!(txtModif.getText().toString().isEmpty())) {
            txtNPartida.setText(txtModif.getText());
            Encabezado = true;
        }
        boolean DH_seleccionado = false;//nos servira para ver que los botones esten seleccionados
        //para ver que el boton debe o haber sea seleccionado
        if (btn_debe.isSelected() || btn_haber.isSelected()) {
            DH_seleccionado = true;
        }

        if ((txtFecha.getDate() != null) && (!txtNPartida.getText().toString().isEmpty())  && (!txtSaldo.getText().toString().isEmpty()) && (DH_seleccionado) && (!txtConcepto.getText().toString().isEmpty()) && cbxLista.getSelectedItem() != "-SELECCIONE CUENTA-") {
            Date date = txtFecha.getDate();
            long d = date.getTime();
            java.sql.Date fecha = new java.sql.Date(d);
            String Fecha = fecha.toString();
            plan.setFecha(fecha.toString());
            if (Double.parseDouble(txtSaldo.getText().toString()) > 0.0) {//saldo mayor a 0.0
                DecimalFormat formato = new DecimalFormat("#.00");
                DefaultTableModel _Modelo = (DefaultTableModel) tablePartidaPreview.getModel();

                if (tablePartidaPreview.getRowCount() == 0 || !Encabezado) {
                    //_Modelo.addRow(new Object[]{Fecha.getText(), "Partida " + txtNPartida.getText(), "", ""});
                    _Modelo.addRow(new Object[]{Fecha, "", "Partida " + txtNPartida.getText(), "", ""});
                    Encabezado = true;
                } else if (Concepto) {
                    _Modelo.removeRow(_Modelo.getRowCount() - 1);
                }

                if (btn_debe.isSelected()) {

                    if (btnMasIVA.isSelected()) {

                        if (btnDFI.isSelected()) { //en caso de que halla debito Fiscal
                            //pasamos el estring a caracter
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }

                            _Modelo.insertRow(this.UltimaDebe, new Object[]{"", cod, cuenta, txtSaldo.getText(), "0"});
                            _Modelo.insertRow(this.UltimaDebe + 1, new Object[]{"", "210702", "Debito Fiscal IVA", String.valueOf(formato.format(Double.parseDouble(txtSaldo.getText()) * 0.13)), "0"});

                        } else if (btnCFI.isSelected()) {
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }
                            //agregamos la cuenta objetivo MAS el respectivo Credito
                            _Modelo.insertRow(this.UltimaDebe, new Object[]{"", cod, cuenta, txtSaldo.getText(), "0"});
                            _Modelo.insertRow(this.UltimaDebe + 1, new Object[]{"", "110601", "Credito Fiscal IVA", String.valueOf(formato.format(Double.parseDouble(txtSaldo.getText()) * 0.13)), ""});
                        }

                    } else if (btnExento.isSelected()) { //Si esta exento de iva (por defecto) solo añadimos la cuenta objetivo
                        cuenta = "";
                        cod = "";
                        combo = cbxLista.getSelectedItem().toString();
                        for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                            c = combo.charAt(i);
                            if (Character.isLetter(c)) {
                                cuenta += String.valueOf(c);
                            } else if (c == ' ') {
                                cuenta += String.valueOf(c);
                            } else {
                                cod += String.valueOf(c);
                            }

                        }
                        _Modelo.insertRow(this.UltimaDebe, new Object[]{"", cod, cuenta, String.valueOf(formato.format(Double.parseDouble(txtSaldo.getText()))), ""});

                    } else if (btnIncluido.isSelected()) { //Para iva INcluido

                        if (btnDFI.isSelected()) {
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }
                            //Exluimos del saldo lo que va hacia el IVA y lo que va hacia la cuenta objetivo
                            _Modelo.insertRow(this.UltimaDebe, new Object[]{"", cod, cuenta, String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13))), ""});
                            _Modelo.insertRow(this.UltimaDebe + 1, new Object[]{"", "210702", "Debito Fiscal IVA", String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13) * 0.13)), "0"});

                        } else if (btnCFI.isSelected()) {
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }
                            _Modelo.insertRow(this.UltimaDebe, new Object[]{"", cod, cuenta, String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13))), ""});
                            _Modelo.insertRow(this.UltimaDebe + 1, new Object[]{"", "110601", "Credito Fiscal IVA", String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13) * 0.13)), ""});
                        }
                    }

                } else if (btn_haber.isSelected()) {
                    if (btnMasIVA.isSelected()) {
                        if (btnDFI.isSelected()) {
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }
                            _Modelo.addRow(new Object[]{"", cod, cuenta, "0", txtSaldo.getText()});
                            _Modelo.addRow(new Object[]{"", "210702", "Debito Fiscal IVA", "", String.valueOf(formato.format(Double.parseDouble(txtSaldo.getText()) * 0.13))});
                        } else if (btnCFI.isSelected()) {
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }
                            _Modelo.addRow(new Object[]{"", cod, cuenta, "0", txtSaldo.getText()});
                            _Modelo.addRow(new Object[]{"", "110601", "Credito Fiscal IVA", "", String.valueOf(formato.format(Double.parseDouble(txtSaldo.getText()) * 0.13))});
                        }
                    } else if (btnExento.isSelected()) {
                        cuenta = "";
                        cod = "";
                        combo = cbxLista.getSelectedItem().toString();
                        for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                            c = combo.charAt(i);
                            if (Character.isLetter(c)) {
                                cuenta += String.valueOf(c);
                            } else if (c == ' ') {
                                cuenta += String.valueOf(c);
                            } else {
                                cod += String.valueOf(c);
                            }

                        }
                        _Modelo.addRow(new Object[]{"", cod, cuenta, "", String.valueOf(formato.format(Double.parseDouble(txtSaldo.getText())))});
                    } else if (btnIncluido.isSelected()) {
                        if (btnDFI.isSelected()) {
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }
                            _Modelo.addRow(new Object[]{"", cod, cuenta, "", String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13)))});
                            _Modelo.addRow(new Object[]{"", "210702", "Debito Fiscal IVA", "", String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13) * 0.13))});
                        } else if (btnCFI.isSelected()) {
                            cuenta = "";
                            cod = "";
                            combo = cbxLista.getSelectedItem().toString();
                            for (int i = 0; i < cbxLista.getSelectedItem().toString().length(); i++) {
                                c = combo.charAt(i);
                                if (Character.isLetter(c)) {
                                    cuenta += String.valueOf(c);
                                } else if (c == ' ') {
                                    cuenta += String.valueOf(c);
                                } else {
                                    cod += String.valueOf(c);
                                }

                            }
                            _Modelo.addRow(new Object[]{"", cod, cuenta, "", String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13)))});
                            _Modelo.addRow(new Object[]{"", "110601", "Credito Fiscal IVA", "", String.valueOf(formato.format((Double.parseDouble(txtSaldo.getText()) / 1.13) * 0.13))});
                        }
                    }
                }

                _Modelo.addRow(new Object[]{"", "", txtConcepto.getText(), "", ""});
                btnAgregar.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, "Saldo debe ser mayor a 0");
            }

            //reiniciar valores del saldo y las cuentas
            txtSaldo.setText(null);
            jTextField3.setText(null);
            btn_debe.setSelected(true);
            btnExento.setSelected(true);

        } else {
            JOptionPane.showMessageDialog(null, "TODOS LOS CAMPOS SON REQUERIDOS");
        }
    }

    public String[][] datosTabla(DefaultTableModel table) {
        int nRow = table.getRowCount(), nCol = table.getColumnCount();
        String[][] tableData = new String[nRow][nCol];
        for (int i = 0; i < nRow; i++) {
            for (int j = 0; j < nCol; j++) {
                tableData[i][j] = table.getValueAt(i, j).toString();
                //System.out.println(tableData[i][j]+"("+i+","+j+")");            
            }
        }
        return tableData;
    }

    public void insertarPartida() throws SQLException { //Funcion que inserta una partida con sus respectivas cuentas en la BD

        //System.out.println("llegue aca");
        DefaultTableModel _Modelo = (DefaultTableModel) tablePartidaPreview.getModel();
        Conexion ConInsertar = new Conexion();
        ResultSet rs = null;

        /*-------------Obtencion de datos del numero de partida------------*/
        String Id = txtNPartida.getText();

        /*--------------Obtencion de cuentas-------------*/  //ya tengo idpartida
        //obtenemos todos los datos existentes el la tabla
        String datos[][] = datosTabla(_Modelo);

        String IdCuenta = null;

        //la fecha y el concepto seran faciles de obtener (son de la primera y la ultima fila
        String Fecha = datos[0][0];
        String Concepto = datos[tablePartidaPreview.getRowCount() - 1][2];
        //System.out.println("Fecha: "+Fecha+"      Concepto: "+Concepto);

        //Primero insertamos el detalle de la partida para referenciarla luego
        ConInsertar.Ejecutar("INSERT INTO `partida`(`id_partida`, `fecha`, `concepto`, `n_partida`, `n_libro`) VALUES (NULL,'" + Fecha + "','" + Concepto + "','" + Id + "','" + l.getAnterior() + "')");
        //ConInsertar.Ejecutar("INSERT INTO `partida`(`id_partida`, `fecha`, `concepto`) VALUES (" + Id + ",'" + Fecha + "','" + Concepto + "')");

        //para cada fila de cuenta que halla (desde la segunda hasta la penultima fila
        for (int i = 1; i < tablePartidaPreview.getRowCount() - 1; i++) {

            //consultamos la id de la cuenta que halla para usar su id luego
            rs = ConInsertar.Consulta("SELECT id_cuenta FROM `cuenta` WHERE `codigo` = '" + datos[i][1] + "'", ConInsertar.getConexion());
            while (rs.next()) {//mientras tenga registros que haga lo siguiente
                IdCuenta = rs.getString(1);
                //System.out.println(IdCuenta);
                System.out.println("entra");
            }

            if (datos[i][3].isEmpty() || datos[i][2].equals("''")) {
                datos[i][3] = "0"; //hacemos cero el valor inexistente, porque el query no admitira un valor vacio
            }
            if (datos[i][4].isEmpty() || datos[i][3].equals("''")) {
                datos[i][4] = "0";
            }
            //vamos a obtener el ultimo registro de una partida para meter las cuentas ahi
            Conexion con = new Conexion();
            ResultSet rs1 = con.Consulta("SELECT id_partida FROM `partida` WHERE `n_libro` = '" + jSpinner1.getValue().toString() + "' ORDER BY `id_partida` DESC LIMIT 1 ", con.getConexion());
            String a = "";
            if (rs1.next()) {
                a = rs1.getString("id_partida");
            }

            //ejecutamos el query para una cuenta de la partida
            ConInsertar.Ejecutar(
                    "INSERT INTO `cuenta_partida` (`id_cuenta_partida`, `cuenta_id`, `partida_id`, `Debe`, `Haber`) "
                    + "VALUES (NULL, '" + IdCuenta + "', '" + a + "', '" + datos[i][3] + "', '" + datos[i][4] + "');");

        }

        rs.close();// cerramos el conjunto de resultados para poder usarlo despues
        ConInsertar.close();
        System.out.println(Fecha);

    }

    public void ModificarPartida() throws SQLException {

        //System.out.println("llegue aca");
        DefaultTableModel _Modelo = (DefaultTableModel) tablePartidaPreview.getModel();
        Conexion ConInsertar = new Conexion();
        ResultSet rs = null;

        /*-------------Obtencion de datos del numero de partida------------*/
        String Id = txtModif.getText();

        /*--------------Obtencion de cuentas-------------*/  //ya tengo idpartida
        //obtenemos todos los datos existentes el la tabla
        String datos[][] = datosTabla(_Modelo);

        String IdCuenta = null;

        //la fecha y el concepto seran faciles de obtener (son de la primera y la ultima fila
        String Fecha = datos[0][0];
        String Concepto = datos[tablePartidaPreview.getRowCount() - 1][2];
        //System.out.println("Fecha: "+Fecha+"      Concepto: "+Concepto);

        //Primero insertamos el detalle de la partida para referenciarla luego
        ConInsertar.Ejecutar("UPDATE `partida` "
                + "SET `fecha`= '" + Fecha + "',`concepto`= '" + Concepto + "' WHERE `id_partida` = " + Id + " && n_libro = '" + jSpinner1.getValue().toString() + "'");

        //para cada fila de cuenta que halla (desde la segunda hasta la penultima fila
        for (int i = 1; i < tablePartidaPreview.getRowCount() - 1; i++) {

            //consultamos la id de la cuenta que halla para usar su id luego
            rs = ConInsertar.Consulta("SELECT id_cuenta FROM `cuenta` WHERE `codigo` = '" + datos[i][1] + "'", ConInsertar.getConexion());
            while (rs.next()) {//mientras tenga registros que haga lo siguiente
                IdCuenta = rs.getString(1);
                //System.out.println(IdCuenta);
                System.out.println("entra");
            }

            if (datos[i][3].isEmpty()) {
                datos[i][3] = "0"; //hacemos cero el valor inexistente, porque el query no admitira un valor vacio
            }
            if (datos[i][4].isEmpty()) {
                datos[i][4] = "0";
            }
            //vamos a obtener el ultimo registro de una partida para meter las cuentas ahi
            /*Conexion con = new Conexion();
            ResultSet rs1 = con.Consulta("SELECT id_partida FROM `partida` WHERE n_libro = '" + jSpinner1.getValue().toString() + "'  && n_partida = '"++"'", con.getConexion());
            String a = "";
            if (rs1.next()) {
                a = rs1.getString("id_partida");
            }
            System.out.println(a);*/
            //ejecutamos el query para una cuenta de la partida
            ConInsertar.Ejecutar(
                    "INSERT INTO `cuenta_partida` (`id_cuenta_partida`, `cuenta_id`, `partida_id`, `Debe`, `Haber`) "
                    + "VALUES (NULL, '" + IdCuenta + "', '" + Id + "', '" + datos[i][3] + "', '" + datos[i][4] + "');");

        }

        rs.close();// Esto es de modificar 
        ConInsertar.close();

    }

    //valida que solo se ingresen numero a un jtext y recibe una variable de tipo evento
    public void SoloNumeros(java.awt.event.KeyEvent evt) {
        char validar = evt.getKeyChar();//obtiene el caracter de la tecla que presiona el usuario
        //si lo que el usuario a escrito es una letra
        if (Character.isLetter(validar)) {
            getToolkit().beep();//suena
            evt.consume();//no se para que es

            JOptionPane.showMessageDialog(rootPane, "Ingresar solo numeros");//le decimos que solo ingrese numeros
        }
    }

    public void cargarNPartida() {

        Conexion Cone = new Conexion();
        //System.out.println(jSpinner1.getValue().toString());
        ResultSet rs = Cone.Consulta("SELECT COUNT(*) FROM partida WHERE `n_libro` ='" + l.getAnterior() + "' ORDER BY n_partida DESC LIMIT 1 ", Cone.getConexion());
        //ResultSet rs = Cone.Consulta("SELECT id_partida FROM partida ORDER BY id_partida DESC LIMIT 1 ", Cone.getConexion());

        String aux = null;
        /*NO SE PORQUE HICISTE ESTO BICHO
         try {
         if (rs.first()) {//recorre el resultset al siguiente registro si es que existen

         rs.beforeFirst();//regresa el puntero al primer registro

         while (rs.next()) {//mientras tenga registros que haga lo siguiente

         aux = rs.getString(1);

         }
         txtNPartida.setText(String.valueOf(Integer.parseInt(aux) + 1)); //en caso de haber, sumamos 1
         } else {

         txtNPartida.setText("1");//esta vacio el resultset

         }
         } catch (SQLException ex) {
         Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
         }
         */
        try {
            if (rs.next()) {
                aux = rs.getString("COUNT(*)");//obtenemos cuantas partidas hay es ese libro
            }
        } catch (SQLException ex) {
            Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println(aux);
        if (Integer.parseInt(aux) >= 1) {
            aux = String.valueOf(Integer.parseInt(aux) + 1);
            txtNPartida.setText(aux);
        } else {
            txtNPartida.setText("1");
        }
    }

    public void OcultarDC() {
        if (btnExento.isSelected()) {
            btnDFI.setEnabled(false);
            btnCFI.setEnabled(false);

        }
    }

    public boolean eliminar(boolean all) {
        boolean exito = false;
        String isConcepto, isPartida;

        DefaultTableModel _Modelo = (DefaultTableModel) tablePartidaPreview.getModel();

        int Filas[] = {};

        if (all) { //esto para borrar todas las filas

            int[] aux = new int[_Modelo.getRowCount()];

            for (int i = 0; i < _Modelo.getRowCount(); i++) {
                aux[i] = i;
            }

            Filas = aux;
            exito = true;

        } else { //esto para borrar las filas seleccionadas

            Filas = tablePartidaPreview.getSelectedRows();

            isConcepto = _Modelo.getValueAt(Filas[Filas.length - 1], 2).toString();//tomamos el ultimo valor de las filas seleccionadas

            isPartida = _Modelo.getValueAt(Filas[0], 2).toString(); //tomamos el primer valor de las filas seleccionadas

            if (isConcepto.equals(txtConcepto.getText()) || isPartida.equals("Partida " + txtNPartida.getText())) {
                return exito;
            } else {
                exito = true;
            }
        }

        for (int i = Filas[Filas.length - 1]; i >= Filas[0]; i--) { //desde el ultimo dato hasta el primero
            if (exito) {
                _Modelo.removeRow(i);
            }

        }

        sumar();
        if (_Modelo.getRowCount() < 3) {
            UltimaDebe = 1;
        }

        return exito;

    }

    public void CargarPlantillas()//esta funcion cargara las plantillas disponibles en un cbx
    {
        try {
            //Nueva conexion
            Conexion conecta = new Conexion();
            ResultSet rs;
            rs = conecta.Consulta("SELECT `NombrePlantilla` FROM `plantilla`  ", conecta.getConexion());

            //removemos todo del combo box
            cbxPlantillas.removeAllItems();
            cbxPlantillas.addItem("---PLANTILLAS---");
            //mientras halla otro dato en rs, añadimos a la combo box un resultado
            while (rs.next()) {

                cbxPlantillas.addItem(rs.getString("NombrePlantilla"));

            }
            //cerramos la conexion cerrando el resultado obtenido

            rs.close();
            conecta.close();

        } catch (SQLException ex) {
            Logger.getLogger(AgregarPartida.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void AgregarPlantilla() {
        DecimalFormat formato = new DecimalFormat("#.00");
        //mas iva
        String iva = String.valueOf(formato.format(Double.parseDouble(plan.getSaldo()) * 0.13));
        String masIva = String.valueOf(formato.format(Double.parseDouble(plan.getSaldo()) * 1.13));

        //IVA incluida
        String sinIva = String.valueOf(formato.format(Double.parseDouble(plan.getSaldo()) - Double.parseDouble(iva)));

        DefaultTableModel modelo = (DefaultTableModel) tablePartidaPreview.getModel();
        String tabla[][] = plan.getTabla();
        //fecha y n partida
        modelo.addRow(new Object[]{plan.getFecha(), "", "Partida " + txtNPartida.getText(), "", ""});
        for (int i = 0; i < plan.getFilas(); i++) {
            //validando los botones de iva
            if (plan.getBotonIVA().equals("EXCENTO")) {
                //poner los saldos
                if (tabla[i][2].equals("$")) {
                    modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], plan.getSaldo(), ""});
                } else if (tabla[i][3].equals("$")) {
                    modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], "", plan.getSaldo()});
                }
            } else if (plan.getBotonIVA().equals("MAS")) {//mas iva
                //ver la cuenta default porque debajo de esta ira el respectivo iva
                if (tabla[i][0].equals(plan.getDef())) {
                    if (plan.getTipoIVA().equals("Debito")) {
                        //poner los saldos
                        if (tabla[i][2].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], plan.getSaldo(), ""});
                            modelo.addRow(new Object[]{"", "210702", "Debito Fiscal IVA", iva, ""});
                        } else if (tabla[i][3].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], "", plan.getSaldo()});
                            modelo.addRow(new Object[]{"", "210702", "Debito Fiscal IVA", "", iva});
                        }
                    } else if (plan.getTipoIVA().equals("Credito")) {
                        //poner los saldos
                        if (tabla[i][2].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], plan.getSaldo(), ""});
                            modelo.addRow(new Object[]{"", "110601", "Credito Fiscal IVA", iva, ""});
                        } else if (tabla[i][3].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], "", plan.getSaldo()});
                            modelo.addRow(new Object[]{"", "110601", "Credito Fiscal IVA", "", iva});
                        }
                    }
                } else {
                    //poner los saldos
                    if (tabla[i][2].equals("$")) {
                        modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], masIva, ""});
                    } else if (tabla[i][3].equals("$")) {
                        modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], "", masIva});
                    }
                }

            } else if (plan.getBotonIVA().equals("INCLUIDO")) {
                //ver la cuenta default porque debajo de esta ira el respectivo iva
                if (tabla[i][0].equals(plan.getDef())) {
                    if (plan.getTipoIVA().equals("Debito")) {
                        //poner los saldos
                        if (tabla[i][2].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], sinIva, ""});
                            modelo.addRow(new Object[]{"", "210702", "Debito Fiscal IVA", iva, ""});
                        } else if (tabla[i][3].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], "", sinIva});
                            modelo.addRow(new Object[]{"", "210702", "Debito Fiscal IVA", "", iva});
                        }
                    } else if (plan.getTipoIVA().equals("Credito")) {
                        //poner los saldos
                        if (tabla[i][2].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], sinIva, ""});
                            modelo.addRow(new Object[]{"", "110601", "Credito Fiscal IVA", iva, ""});
                        } else if (tabla[i][3].equals("$")) {
                            modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], "", sinIva});
                            modelo.addRow(new Object[]{"", "110601", "Credito Fiscal IVA", "", iva});
                        }
                    }
                } else {
                    //poner los saldos
                    if (tabla[i][2].equals("$")) {
                        modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], plan.getSaldo(), ""});
                    } else if (tabla[i][3].equals("$")) {
                        modelo.addRow(new Object[]{"", tabla[i][0], tabla[i][1], "", plan.getSaldo()});
                    }
                }
            }

        }
        //concepto
        modelo.addRow(new Object[]{"", "", plan.getConcepto(), "", ""});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup GrupoBotonesIVA;
    private javax.swing.ButtonGroup Grupo_botones_DH;
    private javax.swing.JPanel PanelDetallePartida;
    private javax.swing.JPanel PanelElegirCuenta;
    private javax.swing.JPanel PanelElegirPlantilla;
    private javax.swing.JPanel PanelIva;
    private javax.swing.JPanel PanelPartida;
    private javax.swing.JPanel PanelSaldo;
    public javax.swing.JLabel btnAgregar;
    public javax.swing.JButton btnAgregarCuenta;
    public javax.swing.JLabel btnAvanzado;
    public javax.swing.JRadioButton btnCFI;
    public javax.swing.JRadioButton btnDFI;
    public javax.swing.JRadioButton btnExento;
    public javax.swing.JRadioButton btnIncluido;
    public javax.swing.JRadioButton btnMasIVA;
    public javax.swing.JLabel btnModificar;
    private javax.swing.JLabel btnSalir;
    public javax.swing.JRadioButton btn_debe;
    public javax.swing.JButton btn_eliminar;
    public javax.swing.JRadioButton btn_haber;
    public javax.swing.JComboBox cbxLista;
    private javax.swing.JComboBox cbxPlantillas;
    private javax.swing.ButtonGroup grupoBotonesDC;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    public javax.swing.JLabel jLabel14;
    public javax.swing.JLabel jLabel15;
    public javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    public javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JSpinner jSpinner1;
    public javax.swing.JTextField jTextField3;
    public javax.swing.JTable tablePartidaPreview;
    public javax.swing.JTextArea txtConcepto;
    public com.toedter.calendar.JDateChooser txtFecha;
    public static javax.swing.JTextField txtModif;
    public javax.swing.JTextField txtNPartida;
    public javax.swing.JTextField txtSaldo;
    private javax.swing.JTextField txtTotalDebe;
    private javax.swing.JTextField txtTotalHaber;
    // End of variables declaration//GEN-END:variables
}
